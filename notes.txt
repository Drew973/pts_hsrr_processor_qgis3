
qsqltable can work with ranges. Won't give any warnings if user sets to something invalid. can use custom delegate and QValidator to solve



want way to:
	select sec from feature
	select feature from sec
	select ch from feature
	select feature from ch
	


toDo:
add virtual field with cost to section_changes. use for background color of tableView.
highlight cost>20 red

change ch to start_run_ch, e_ch to end_run_ch

find and remove unnecessary files
check setup database with new test database.







fieldsModel
fieldsWidget
fieldsMenu


autofitting:

	-should be network aware - doesn't go from section to unconnected section
	-should be able to handle gaps where readings go off network
	-chainages should be near section length
	-should minimize distance between section and readings.
	-chainages should be continuous where no dummy.
	-section should be connected to last or dummy.

	have pg_routing in kashyyk as well as local.

	map matching techniques

	have Dijkstra's algorithm in plpgsql


	only vertices (ends of vect) reliable for readings as 100m spacing


	upload runs to dialog?
	help to top menu

	network has dummy section 'D' to allow gap in route

	passed_nodes
	run,chainage,id...

	each row of section changes and passed nodes is node of graph.
		chainage and id.

	edges link to rows with topology linked and chainage difference near geometry length


	cost from run geometry and edge geometry. can get from chainages

		cost of gap/dummy should increase with chainage difference.
		needs to be higher than cost of valid path.
		constant*chainage difference.


	user specifies start and end rows?
	default to 1st and last row

	dummy edges mean incomplete route can always be found so missing nodes aren't huge problem


	cost(run,s_ch,e_ch):
		returns float


	edges(node_id):
		returns array [end_id,cost]
		or table

	can now use DA to get route


know where any changes should be.
	from nodes/gaps. 
	need to link them

	gaps have only dummy
	nodes have...


	for each continuous segment of readings?
	or each run? need to handle where goes off network anyway.


	start at lowest chainage.(start of 1st reading).
	end at highest chainage (end of last reading)
	afterwards remove initial and final dummy.

	shortest path problem




start node of section not always near run geometry eg roundabouts
run chainage for section:

could have been visited multiple times.

all changes should be at node except where going off network and where readings bad






run,chainage,section,reversed,correct section,correct_reversed,metric1,metric2...


numeric(precision,scale)
scale is number of decimal places. could use to round to x meters


end result
table of run,section,start_sec_ch,end_sec_ch,rl...
can easily get chainage range for section.

select run,s_ch,e_ch,sec,False as reversed 
from readings inner join network on st_dwithin(vect,geom,100) and vectors_align(geom,vect) and has_forward
order by sec, reversed,s_ch



